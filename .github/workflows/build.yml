name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME && 'kis2show/lazybala' || '' }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Download yt-dlp binaries
      run: |
        mkdir -p bin

        # 获取最新版本
        LATEST_VERSION=$(curl -s https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Latest yt-dlp version: $LATEST_VERSION"

        # 下载 amd64 版本
        curl -L "https://github.com/yt-dlp/yt-dlp/releases/download/$LATEST_VERSION/yt-dlp_linux" -o bin/yt-dlp_linux

        # 下载 arm64 版本
        curl -L "https://github.com/yt-dlp/yt-dlp/releases/download/$LATEST_VERSION/yt-dlp_linux_aarch64" -o bin/yt-dlp_linux_aarch64

        # 设置执行权限
        chmod +x bin/yt-dlp_*

    - name: Download ffmpeg binaries
      continue-on-error: true  # 允许 ffmpeg 下载失败
      run: |
        echo "Downloading ffmpeg binaries..."

        # 尝试下载 amd64 ffmpeg
        if curl -L --connect-timeout 30 --max-time 300 "https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz" -o ffmpeg-amd64.tar.xz; then
          tar -xf ffmpeg-amd64.tar.xz
          mv ffmpeg-git-*-amd64-static/ffmpeg bin/ffmpeg_linux 2>/dev/null || echo "Failed to extract amd64 ffmpeg"
          mv ffmpeg-git-*-amd64-static/ffprobe bin/ffprobe_linux 2>/dev/null || echo "Failed to extract amd64 ffprobe"
        else
          echo "Failed to download amd64 ffmpeg, skipping..."
        fi

        # 尝试下载 arm64 ffmpeg
        if curl -L --connect-timeout 30 --max-time 300 "https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-arm64-static.tar.xz" -o ffmpeg-arm64.tar.xz; then
          tar -xf ffmpeg-arm64.tar.xz
          mv ffmpeg-git-*-arm64-static/ffmpeg bin/ffmpeg_linux_aarch64 2>/dev/null || echo "Failed to extract arm64 ffmpeg"
          mv ffmpeg-git-*-arm64-static/ffprobe bin/ffprobe_linux_aarch64 2>/dev/null || echo "Failed to extract arm64 ffprobe"
        else
          echo "Failed to download arm64 ffmpeg, skipping..."
        fi

        # 设置执行权限
        chmod +x bin/ffmpeg_* bin/ffprobe_* 2>/dev/null || echo "Some ffmpeg binaries not found"

        # 清理临时文件
        rm -rf ffmpeg-*.tar.xz ffmpeg-git-* 2>/dev/null || true

        # 检查下载结果
        echo "Available binaries:"
        ls -la bin/ || echo "No binaries directory found"

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ github.ref_name }}

    - name: Verify build outputs
      run: |
        echo "Build digest: ${{ steps.build.outputs.digest }}"
        echo "Build metadata: ${{ steps.build.outputs.metadata }}"
        echo "Tags pushed: ${{ steps.meta.outputs.tags }}"

  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: LazyBala ${{ github.ref_name }}
        generate_release_notes: true
        body: |
          ## 🎉 LazyBala ${{ github.ref_name }}

          LazyBala 是一个基于 Go 和纯 JavaScript 的媒体下载应用，支持 Bilibili 等平台的音频下载。

          ### ✨ 主要特性
          - 🎵 哔哩哔哩音频下载
          - 🔐 扫码登录支持
          - 📊 实时下载进度
          - 🔄 断点续传
          - 🔄 自动版本更新

          ### 🐳 Docker 镜像

          **GitHub Container Registry:**
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```

          **Docker Hub:**
          ```bash
          docker pull kis2show/lazybala:${{ github.ref_name }}
          ```

          ### 🚀 使用方法
          ```bash
          # 使用 GitHub Container Registry
          docker run -d \
            --name lazybala \
            -p 8080:8080 \
            -v $(pwd)/audiobooks:/app/audiobooks \
            -v $(pwd)/config:/app/config \
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

          # 或使用 Docker Hub
          docker run -d \
            --name lazybala \
            -p 8080:8080 \
            -v $(pwd)/audiobooks:/app/audiobooks \
            -v $(pwd)/config:/app/config \
            kis2show/lazybala:${{ github.ref_name }}
          ```

          ### 📖 更多信息
          - [使用说明](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/README.md)
          - [Docker 部署](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/DOCKER.md)
        draft: false
        prerelease: false
